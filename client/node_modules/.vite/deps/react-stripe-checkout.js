import {
  require_prop_types
} from "./chunk-T4EJXW5W.js";
import "./chunk-ABW6RDMA.js";
import {
  require_react
} from "./chunk-N4E5ALBP.js";
import {
  __commonJS
} from "./chunk-IGMYUX52.js";

// node_modules/react-stripe-checkout/dist/main.js
var require_main = __commonJS({
  "node_modules/react-stripe-checkout/dist/main.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var scriptLoading = false;
    var scriptLoaded = false;
    var scriptDidError = false;
    var ReactStripeCheckout = function(_React$Component) {
      _inherits(ReactStripeCheckout2, _React$Component);
      function ReactStripeCheckout2(props) {
        _classCallCheck(this, ReactStripeCheckout2);
        var _this = _possibleConstructorReturn(this, (ReactStripeCheckout2.__proto__ || Object.getPrototypeOf(ReactStripeCheckout2)).call(this, props));
        _this.onScriptLoaded = function() {
          if (!ReactStripeCheckout2.stripeHandler) {
            ReactStripeCheckout2.stripeHandler = StripeCheckout.configure({
              key: _this.props.stripeKey
            });
            if (_this.hasPendingClick) {
              _this.showStripeDialog();
            }
          }
        };
        _this.onScriptError = function() {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this.hideLoadingDialog();
          if (_this.props.onScriptError) {
            _this.props.onScriptError.apply(_this, args);
          }
        };
        _this.onClosed = function() {
          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          if (_this._isMounted)
            _this.setState({ open: false });
          if (_this.props.closed) {
            _this.props.closed.apply(_this, args);
          }
        };
        _this.onOpened = function() {
          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          _this.setState({ open: true });
          if (_this.props.opened) {
            _this.props.opened.apply(_this, args);
          }
        };
        _this.getConfig = function() {
          return ["token", "image", "name", "description", "amount", "locale", "currency", "panelLabel", "zipCode", "shippingAddress", "billingAddress", "email", "allowRememberMe", "bitcoin", "alipay", "alipayReusable"].reduce(function(config, key) {
            return _extends({}, config, _this.props.hasOwnProperty(key) && _defineProperty({}, key, _this.props[key]));
          }, {
            opened: _this.onOpened,
            closed: _this.onClosed
          });
        };
        _this.onClick = function() {
          if (_this.props.disabled) {
            return;
          }
          if (scriptDidError) {
            try {
              throw new Error("Tried to call onClick, but StripeCheckout failed to load");
            } catch (x) {
            }
          } else if (ReactStripeCheckout2.stripeHandler) {
            _this.showStripeDialog();
          } else {
            _this.showLoadingDialog();
            _this.hasPendingClick = true;
          }
        };
        _this.handleOnMouseDown = function() {
          _this.setState({
            buttonActive: true
          });
        };
        _this.handleOnMouseUp = function() {
          _this.setState({
            buttonActive: false
          });
        };
        _this.state = {
          open: false,
          buttonActive: false
        };
        return _this;
      }
      _createClass(ReactStripeCheckout2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          this._isMounted = true;
          if (scriptLoaded) {
            return;
          }
          if (scriptLoading) {
            return;
          }
          scriptLoading = true;
          var script = document.createElement("script");
          if (typeof this.props.onScriptTagCreated === "function") {
            this.props.onScriptTagCreated(script);
          }
          script.src = "https://checkout.stripe.com/checkout.js";
          script.async = 1;
          this.loadPromise = function() {
            var canceled = false;
            var promise = new Promise(function(resolve, reject) {
              script.onload = function() {
                scriptLoaded = true;
                scriptLoading = false;
                resolve();
                _this2.onScriptLoaded();
              };
              script.onerror = function(event) {
                scriptDidError = true;
                scriptLoading = false;
                reject(event);
                _this2.onScriptError(event);
              };
            });
            var wrappedPromise = new Promise(function(accept, cancel) {
              promise.then(function() {
                return canceled ? cancel({ isCanceled: true }) : accept();
              });
              promise.catch(function(error) {
                return canceled ? cancel({ isCanceled: true }) : cancel(error);
              });
            });
            return {
              promise: wrappedPromise,
              cancel: function cancel() {
                canceled = true;
              }
            };
          }();
          this.loadPromise.promise.then(this.onScriptLoaded).catch(this.onScriptError);
          document.body.appendChild(script);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (!scriptLoading) {
            this.updateStripeHandler();
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._isMounted = false;
          if (this.loadPromise) {
            this.loadPromise.cancel();
          }
          if (ReactStripeCheckout2.stripeHandler && this.state.open) {
            ReactStripeCheckout2.stripeHandler.close();
          }
        }
      }, {
        key: "updateStripeHandler",
        value: function updateStripeHandler() {
          if (!ReactStripeCheckout2.stripeHandler || this.props.reconfigureOnUpdate) {
            ReactStripeCheckout2.stripeHandler = StripeCheckout.configure({
              key: this.props.stripeKey
            });
          }
        }
      }, {
        key: "showLoadingDialog",
        value: function showLoadingDialog() {
          if (this.props.showLoadingDialog) {
            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }
            this.props.showLoadingDialog.apply(this, args);
          }
        }
      }, {
        key: "hideLoadingDialog",
        value: function hideLoadingDialog() {
          if (this.props.hideLoadingDialog) {
            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }
            this.props.hideLoadingDialog.apply(this, args);
          }
        }
      }, {
        key: "showStripeDialog",
        value: function showStripeDialog() {
          this.hideLoadingDialog();
          ReactStripeCheckout2.stripeHandler.open(this.getConfig());
        }
      }, {
        key: "renderDefaultStripeButton",
        value: function renderDefaultStripeButton() {
          return _react2.default.createElement("button", _extends({}, _defineProperty({}, this.props.triggerEvent, this.onClick), {
            className: this.props.className,
            onMouseDown: this.handleOnMouseDown,
            onFocus: this.handleOnMouseDown,
            onMouseUp: this.handleOnMouseUp,
            onMouseOut: this.handleOnMouseUp,
            onBlur: this.handleOnMouseUp,
            style: _extends({}, {
              overflow: "hidden",
              display: "inline-block",
              background: "linear-gradient(#28a0e5,#015e94)",
              border: 0,
              padding: 1,
              textDecoration: "none",
              borderRadius: 5,
              boxShadow: "0 1px 0 rgba(0,0,0,0.2)",
              cursor: "pointer",
              visibility: "visible",
              userSelect: "none"
            }, this.state.buttonActive && {
              background: "#005d93"
            }, this.props.style)
          }), _react2.default.createElement("span", {
            style: _extends({}, {
              backgroundImage: "linear-gradient(#7dc5ee,#008cdd 85%,#30a2e4)",
              fontFamily: '"Helvetica Neue",Helvetica,Arial,sans-serif',
              fontSize: 14,
              position: "relative",
              padding: "0 12px",
              display: "block",
              height: 30,
              lineHeight: "30px",
              color: "#fff",
              fontWeight: "bold",
              boxShadow: "inset 0 1px 0 rgba(255,255,255,0.25)",
              textShadow: "0 -1px 0 rgba(0,0,0,0.25)",
              borderRadius: 4
            }, this.state.buttonActive && {
              color: "#eee",
              boxShadow: "inset 0 1px 0 rgba(0,0,0,0.1)",
              backgroundImage: "linear-gradient(#008cdd,#008cdd 85%,#239adf)"
            }, this.props.textStyle)
          }, this.props.label));
        }
      }, {
        key: "renderDisabledButton",
        value: function renderDisabledButton() {
          return _react2.default.createElement("button", {
            disabled: true,
            style: {
              background: "rgba(0,0,0,0.2)",
              overflow: "hidden",
              display: "inline-block",
              border: 0,
              padding: 1,
              textDecoration: "none",
              borderRadius: 5,
              userSelect: "none"
            }
          }, _react2.default.createElement("span", {
            style: {
              boxShadow: "inset 0 1px 0 rgba(255,255,255,0.25)",
              fontFamily: '"Helvetica Neue",Helvetica,Arial,sans-serif',
              fontSize: 14,
              position: "relative",
              padding: "0 12px",
              display: "block",
              height: 30,
              lineHeight: "30px",
              borderRadius: 4,
              color: "#999",
              background: "#f8f9fa",
              textShadow: "0 1px 0 rgba(255,255,255,0.5)"
            }
          }, this.props.label));
        }
      }, {
        key: "render",
        value: function render() {
          if (this.props.desktopShowModal === true && !this.state.open) {
            this.onClick();
          } else if (this.props.desktopShowModal === false && this.state.open) {
            ReactStripeCheckout2.stripeHandler.close();
          }
          var ComponentClass = this.props.ComponentClass;
          if (this.props.children) {
            return _react2.default.createElement(ComponentClass, _extends({}, _defineProperty({}, this.props.triggerEvent, this.onClick), {
              children: this.props.children
            }));
          }
          return this.props.disabled ? this.renderDisabledButton() : this.renderDefaultStripeButton();
        }
      }]);
      return ReactStripeCheckout2;
    }(_react2.default.Component);
    ReactStripeCheckout.defaultProps = {
      className: "StripeCheckout",
      label: "Pay With Card",
      locale: "auto",
      ComponentClass: "span",
      reconfigureOnUpdate: false,
      triggerEvent: "onClick"
    };
    ReactStripeCheckout.propTypes = {
      desktopShowModal: _propTypes2.default.bool,
      triggerEvent: _propTypes2.default.oneOf(["onClick", "onTouchTap", "onTouchStart"]),
      label: _propTypes2.default.string,
      style: _propTypes2.default.object,
      textStyle: _propTypes2.default.object,
      disabled: _propTypes2.default.bool,
      ComponentClass: _propTypes2.default.string,
      showLoadingDialog: _propTypes2.default.func,
      hideLoadingDialog: _propTypes2.default.func,
      onScriptError: _propTypes2.default.func,
      onScriptTagCreated: _propTypes2.default.func,
      reconfigureOnUpdate: _propTypes2.default.bool,
      stripeKey: _propTypes2.default.string.isRequired,
      token: _propTypes2.default.func.isRequired,
      name: _propTypes2.default.string,
      description: _propTypes2.default.string,
      image: _propTypes2.default.string,
      amount: _propTypes2.default.number,
      locale: _propTypes2.default.oneOf([
        "auto",
        "zh",
        "da",
        "nl",
        "en",
        "fr",
        "de",
        "it",
        "ja",
        "no",
        "es",
        "sv"
      ]),
      currency: _propTypes2.default.oneOf([
        "AED",
        "AFN",
        "ALL",
        "AMD",
        "ANG",
        "AOA",
        "ARS",
        "AUD",
        "AWG",
        "AZN",
        "BAM",
        "BBD",
        "BDT",
        "BGN",
        "BIF",
        "BMD",
        "BND",
        "BOB",
        "BRL",
        "BSD",
        "BWP",
        "BZD",
        "CAD",
        "CDF",
        "CHF",
        "CLP",
        "CNY",
        "COP",
        "CRC",
        "CVE",
        "CZK",
        "DJF",
        "DKK",
        "DOP",
        "DZD",
        "EEK",
        "EGP",
        "ETB",
        "EUR",
        "FJD",
        "FKP",
        "GBP",
        "GEL",
        "GIP",
        "GMD",
        "GNF",
        "GTQ",
        "GYD",
        "HKD",
        "HNL",
        "HRK",
        "HTG",
        "HUF",
        "IDR",
        "ILS",
        "INR",
        "ISK",
        "JMD",
        "JPY",
        "KES",
        "KGS",
        "KHR",
        "KMF",
        "KRW",
        "KYD",
        "KZT",
        "LAK",
        "LBP",
        "LKR",
        "LRD",
        "LSL",
        "LTL",
        "LVL",
        "MAD",
        "MDL",
        "MGA",
        "MKD",
        "MNT",
        "MOP",
        "MRO",
        "MUR",
        "MVR",
        "MWK",
        "MXN",
        "MYR",
        "MZN",
        "NAD",
        "NGN",
        "NIO",
        "NOK",
        "NPR",
        "NZD",
        "PAB",
        "PEN",
        "PGK",
        "PHP",
        "PKR",
        "PLN",
        "PYG",
        "QAR",
        "RON",
        "RSD",
        "RUB",
        "RWF",
        "SAR",
        "SBD",
        "SCR",
        "SEK",
        "SGD",
        "SHP",
        "SLL",
        "SOS",
        "SRD",
        "STD",
        "SVC",
        "SZL",
        "THB",
        "TJS",
        "TOP",
        "TRY",
        "TTD",
        "TWD",
        "TZS",
        "UAH",
        "UGX",
        "USD",
        "UYU",
        "UZS",
        "VND",
        "VUV",
        "WST",
        "XAF",
        "XCD",
        "XOF",
        "XPF",
        "YER",
        "ZAR",
        "ZMW"
      ]),
      panelLabel: _propTypes2.default.string,
      zipCode: _propTypes2.default.bool,
      billingAddress: _propTypes2.default.bool,
      shippingAddress: _propTypes2.default.bool,
      email: _propTypes2.default.string,
      allowRememberMe: _propTypes2.default.bool,
      bitcoin: _propTypes2.default.bool,
      alipay: _propTypes2.default.oneOf(["auto", true, false]),
      alipayReusable: _propTypes2.default.bool,
      opened: _propTypes2.default.func,
      closed: _propTypes2.default.func
    };
    ReactStripeCheckout._isMounted = false;
    exports.default = ReactStripeCheckout;
  }
});

// dep:react-stripe-checkout
var react_stripe_checkout_default = require_main();
export {
  react_stripe_checkout_default as default
};
//# sourceMappingURL=react-stripe-checkout.js.map
